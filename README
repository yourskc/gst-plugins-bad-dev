GStreamer 1.19.x MOIL development 

This repo run on Ubuntu 22.04, it is used for the development 

for Renesas RZ/G2L. 


Evnironment :
--------------

Ubuntu 22.04 

Gstremaer Installation :

https://gstreamer.freedesktop.org/documentation/installing/on-linux.html?gi-language=c




git clone this repository. Modify source programs, compile 





Work Flow :
--------------

A. mainmoil_6view 



B. gst-plugins-bad-dev  

C. gst-plugins-bad   ( forked from Renesas,  )

Check the branch with 

- git branch

the branch should be RCAR-GEN3e/1.16.3


Copy 2 source files ( gstequirectangular.c and gstequirectangular.h ) from Step B. to here ( under gst/geometrictransform/ )

uncomment the line below in the beginning of gstequirectangular.h
// #define GST_RENESAS

Compile it under Doecker container ( Ubuntu 20.04 )

The environment is not so easy to prepare, since we need to

install other dependency packages. 

But this step can be skiped. 

- ./autogen.sh

- make 

git commit and remember the commit ID, will use it in the next step

cat .git/refs/heads/RCAR-GEN3e

D. Yocto project

modify the recipes, use the above commit ID in 

meta-renesas/meta-rz-common/recipes-multimedia/gstreamer/gstreamer1.0-plugins-bad_1.16.3.bbappend

example commit ID is as below,

SRCREV = "12f14df8132a98d72ab64ba430870032f56a0600"

bitbake core-image-qt, fetch the package from the repo on Github 

Write the result image to SD card

E. Run getreamer pipeline on Renesas RZ/G2L

Copy X, Y map files and mp4 file to target board for testing.

Transfer to the target board using scp or wget   

for example, run the command on the Renesas RZ/G2L

scp skc@192.168.0.105:/home/skc/gst-moil/endo01.mp4 . 

modify run.sh to match the actual .mp4 file location

- run.sh

Compile :
--------------

meson build

ninja -C build

( After the successfully compilation, a file named libgstgeometrictransform.so will come up in the folder as below )

sudo cp ./build/gst/geometrictransform/libgstgeometrictransform.so /usr/lib/x86_64-linux-gnu/gstreamer-1.0

Check if success:

gst-inspect-1.0 ./build/gst/geometrictransform/libgstgeometrictransform.so

Install :
--------------

sudo cp ./build/gst/geometrictransform/libgstgeometrictransform.so /usr/lib/x86_64-linux-gnu/gstreamer-1.0

Test : 
--------------

1. 
gst-launch-1.0 filesrc location=endo01.jpg ! videotestsrc ! equirectangular ! videoconvert ! autovideosink

2. image file ( still checking )
cd test_env

gst-launch-1.0 filesrc location=endo01.jpg ! jpegdec ! imagefreeze ! autovideosink
( X )
gst-launch-1.0 filesrc location=endo01.jpg ! jpegdec ! imagefreeze ! equirectangular ! videoconvert ! autovideosink
( X )
gst-launch-1.0 filesrc location=endo01.jpg ! jpegdec ! imagefreeze ! videoconvert ! x264enc ! rtph264pay config-interval=10 ! udpsink host=localhost port=5000 -v
3. usb camera

gst-launch-1.0 v4l2src ! equirectangular ! videoconvert ! autovideosink

set canera resolution

sudo apt install v4l2-utils
v4l2-ctl -V    ( display current video format )
v4l2-ctl -d dev/video0 --list-formats
v4l2-ctl -d dev/video0 --list-formats-ext
(320x240, 352x288, 640x480, 800x600, 960x720, 1600x1200)
v4l2-ctl -d dev/video0 --set-fmt-video=width=800,height=600,pixelformat=YUYV

4. mp4 file

cd test_env

gst-launch-1.0 playbin uri=file:///home/skc/gst-work/gst-plugins-bad-dev/test_env/endo01.mp4 video-sink="videoconvert ! equirectangular ! videoconvert ! autovideosink"

gst-launch-1.0 firesrc location=endo01.mp4 ! decodebin ! videorate ! "video/x-raw,framerate=5/1" ! autovideosink

gst-launch-1.0 firesrc location=endo01.mp4 ! decodebin ! videorate rate=0.1 ! autovideosink

gst-launch-1.0 filesrc location=endo01.mp4 ! qtdemux !queue ! avdec_h264 ! videoconvert ! equirectangular ! videoconvert ! autovideosink

5. rtsp streaming 

on PC 

sender
( x )
gst-launch-1.0 -e filesrc location=endo01.mp4 ! qtdemux ! queue ! h264parse ! rtph264pay config-interval=10 ! udpsink host=localhost port=5000 -v   


( -e seems can be ignored )
gst-launch-1.0 filesrc location=endo01.mp4 ! qtdemux ! queue ! avdec_h264 ! autovideosink   ( OK )
gst-launch-1.0 filesrc location=endo01.mp4 ! qtdemux ! queue ! avdec_h264 ! videoconvert ! equirectangular ! videoconvert ! autovideosink   ( OK )
( X )
gst-launch-1.0 filesrc location=endo01.mp4 ! qtdemux ! queue ! avdec_h264 ! x264enc ! rtph264pay config-interval=10 ! udpsink host=localhost port=5000 -v
gst-launch-1.0 filesrc location=endo01.mp4 ! qtdemux ! queue ! avdec_h264 ! videoconvert ! equirectangular ! videoconvert ! x264enc ! rtph264pay config-interval=10 ! udpsink host=localhost port=5000 -v
can run, but can not received by receiver

receiver

gst-launch-1.0 udpsrc port=5000 ! "application/x-rtp, media=video, clock-rate=90000, encoding-name=H264, payload=96" ! rtph264depay ! decodebin ! autovideosink   ( OK )


The bwlow UDP pair commands work fine !!

receiver 
gst-launch-1.0 -v udpsrc uri=udp://localhost:5000 ! application/x-rtp, media=video, payload=96, encoding-name=H264 ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink

sender 
gst-launch-1.0 filesrc localtion=endo01.mp4 ! qtdemux ! queue ! avdec_h264 ! x264enc ! rtph264pay config-interval=10 ! udpsink host=localhost port=5000 -v
gst-launch-1.0 filesrc localtion=endo01.mp4 ! qtdemux ! queue ! avdec_h264 ! videoconvert ! equirectangular ! videoconvert ! x264enc ! rtph264pay config-interval=10 ! udpsink host=localhost port=5000 -v 

RTSP ref. to
https://gist.github.com/bmount/6cb201aa1a869bfdc0b3a4be49fa9c26


Renesas

Receiver ( PC, Ubuntu 2204 )

sudo gst-launch-1.0 -e udpsrc port=5000 buffer-size=100000000 caps="application/x-rtp" ! queue ! rtph264depay ! h264parse ! decodebin ! videoconvert ! autovideosink

Sender ( Renesas RZ/G2L )

run.sh  transmit
gst-launch-1.0 -e filesrc location=./endo02.mp4 ! qtdemux ! queue ! \
h264parse ! video/x-h264, stream-format=avc,alignment=au ! rtph264pay pt=96 name=pay0 \
config-interval=3 mtu=6000 ! udpsink host=192.168.0.105 port=5000

run2.sh   decode encode transmit
gst-launch-1.0 -e filesrc location=./endo02.mp4 ! qtdemux ! queue ! \
h264parse ! omxh264dec ! omxh264enc ! rtph264pay config-interval=10  ! udpsink host=192.168.0.105 port=5000

run3.sh run4.sh  decode transform encode transmit
gst-launch-1.0 -e filesrc location=./endo02.mp4 ! qtdemux ! queue ! \
h264parse ! omxh264dec ! videoconvert ! equirectangular ! videoconvert ! omxh264enc ! rtph264pay config-interval=10  ! udpsink host=192.168.0.105 port=5000

run5.sh decode
gst-launch-1.0 -e filesrc location=./endo02.mp4 ! qtdemux ! queue ! \
h264parse ! omxh264dec ! videoconvert ! equirectangular ! videoconvert ! autovideosink

